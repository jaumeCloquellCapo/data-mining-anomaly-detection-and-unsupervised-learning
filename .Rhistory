devtools::source_url('https://raw.githubusercontent.com/brooksandrew/Rsenal/master/R/rules2df.R')
devtools::source_url('https://raw.githubusercontent.com/brooksandrew/Rsenal/master/R/bin.R')
arulesApp <- function (dataset, bin=T, vars=5, supp=0.1, conf=0.5) {
## binning numeric data
for(i in 1:ncol(dataset)) {
if(class(dataset[,i]) %in% c('numeric', 'integer')) dataset[,i] <- Rsenal::depthbin(dataset[,i], nbins=10)
}
## calling Shiny App
shinyApp(ui = shinyUI(pageWithSidebar(
headerPanel("Association Rules"),
sidebarPanel(
conditionalPanel(
condition = "input.samp=='Sample'",
numericInput("nrule", 'Number of Rules', 5), br()
),
conditionalPanel(
condition = "input.mytab=='graph'",
radioButtons('graphType', label='Graph Type', choices=c('itemsets','items'), inline=T), br()
),
conditionalPanel(
condition = "input.lhsv=='Subset'",
uiOutput("choose_lhs"), br()
),
conditionalPanel(
condition = "input.rhsv=='Subset'",
uiOutput("choose_rhs"), br()
),
conditionalPanel(
condition = "input.mytab=='grouped'",
sliderInput('k', label='Choose # of rule clusters', min=1, max=150, step=1, value=15), br()
),
conditionalPanel(
condition = "input.mytab %in%' c('grouped', 'graph', 'table', 'datatable', 'scatter', 'paracoord', 'matrix', 'itemFreq')",
radioButtons('samp', label='Sample', choices=c('All Rules', 'Sample'), inline=T), br(),
uiOutput("choose_columns"), br(),
sliderInput("supp", "Support:", min = 0, max = 1, value = supp , step = 1/10000), br(),
sliderInput("conf", "Confidence:", min = 0, max = 1, value = conf , step = 1/10000), br(),
selectInput('sort', label='Sorting Criteria:', choices = c('lift', 'confidence', 'support')), br(), br(),
numericInput("minL", "Min. items per set:", 2), br(),
numericInput("maxL", "Max. items per set::", 3), br(),
radioButtons('lhsv', label='LHS variables', choices=c('All', 'Subset')), br(),
radioButtons('rhsv', label='RHS variables', choices=c('All', 'Subset')), br(),
downloadButton('downloadData', 'Download Rules as CSV')
)
),
mainPanel(
tabsetPanel(id='mytab',
tabPanel('Grouped', value='grouped', plotOutput("groupedPlot", width='100%', height='100%')),
tabPanel('Graph', value='graph', plotOutput("graphPlot", width='100%', height='100%')),
tabPanel('Scatter', value='scatter', plotOutput("scatterPlot", width='100%', height='100%')),
tabPanel('Parallel Coordinates', value='paracoord', plotOutput("paracoordPlot", width='100%', height='100%')),
tabPanel('Matrix', value='matrix', plotOutput("matrixPlot", width='100%', height='100%')),
tabPanel('ItemFreq', value='itemFreq', plotOutput("itemFreqPlot", width='100%', height='100%')),
tabPanel('Table', value='table', verbatimTextOutput("rulesTable")),
tabPanel('Data Table', value='datatable', dataTableOutput("rulesDataTable"))
)
)
)),
server = function(input, output) {
output$choose_columns <- renderUI({
checkboxGroupInput("cols", "Choose variables:",
choices  = colnames(dataset),
selected = colnames(dataset)[1:vars])
})
output$choose_lhs <- renderUI({
checkboxGroupInput("colsLHS", "Choose LHS variables:",
choices  = input$cols,
selected = input$cols[1])
})
output$choose_rhs <- renderUI({
checkboxGroupInput("colsRHS", "Choose RHS variables:",
choices  = input$cols,
selected = input$cols[1])
})
## Extracting and Defining arules
rules <- reactive({
tr <- as(dataset[,input$cols], 'transactions')
arAll <- apriori(tr, parameter=list(support=input$supp, confidence=input$conf, minlen=input$minL, maxlen=input$maxL))
if(input$rhsv=='Subset' & input$lhsv!='Subset'){
varsR <- character()
for(i in 1:length(input$colsRHS)){
tmp <- with(dataset, paste(input$colsRHS[i], '=', levels(as.factor(get(input$colsRHS[i]))), sep=''))
varsR <- c(varsR, tmp)
}
ar <- subset(arAll, subset=rhs %in% varsR)
} else if(input$lhsv=='Subset' & input$rhsv!='Subset') {
varsL <- character()
for(i in 1:length(input$colsLHS)){
tmp <- with(dataset, paste(input$colsLHS[i], '=', levels(as.factor(get(input$colsLHS[i]))), sep=''))
varsL <- c(varsL, tmp)
}
ar <- subset(arAll, subset=lhs %in% varsL)
} else if(input$lhsv=='Subset' & input$rhsv=='Subset') {
varsL <- character()
for(i in 1:length(input$colsLHS)){
tmp <- with(dataset, paste(input$colsLHS[i], '=', levels(as.factor(get(input$colsLHS[i]))), sep=''))
varsL <- c(varsL, tmp)
}
varsR <- character()
for(i in 1:length(input$colsRHS)){
tmp <- with(dataset, paste(input$colsRHS[i], '=', levels(as.factor(get(input$colsRHS[i]))), sep=''))
varsR <- c(varsR, tmp)
}
ar <- subset(arAll, subset=lhs %in% varsL & rhs %in% varsR)
} else {
ar <- arAll
}
quality(ar)$conviction <- interestMeasure(ar, method='conviction', transactions=tr)
quality(ar)$hyperConfidence <- interestMeasure(ar, method='hyperConfidence', transactions=tr)
quality(ar)$cosine <- interestMeasure(ar, method='cosine', transactions=tr)
quality(ar)$chiSquare <- interestMeasure(ar, method='chiSquare', transactions=tr)
quality(ar)$coverage <- interestMeasure(ar, method='coverage', transactions=tr)
quality(ar)$doc <- interestMeasure(ar, method='doc', transactions=tr)
quality(ar)$gini <- interestMeasure(ar, method='gini', transactions=tr)
quality(ar)$hyperLift <- interestMeasure(ar, method='hyperLift', transactions=tr)
ar
})
# Rule length
nR <- reactive({
nRule <- ifelse(input$samp == 'All Rules', length(rules()), input$nrule)
})
## Grouped Plot #########################
output$groupedPlot <- renderPlot({
ar <- rules()
plot(sort(ar, by=input$sort)[1:nR()], method='grouped', control=list(k=input$k))
}, height=800, width=800)
## Graph Plot ##########################
output$graphPlot <- renderPlot({
ar <- rules()
plot(sort(ar, by=input$sort)[1:nR()], method='graph', control=list(type=input$graphType))
}, height=800, width=800)
## Scatter Plot ##########################
output$scatterPlot <- renderPlot({
ar <- rules()
plot(sort(ar, by=input$sort)[1:nR()], method='scatterplot')
}, height=800, width=800)
## Parallel Coordinates Plot ###################
output$paracoordPlot <- renderPlot({
ar <- rules()
plot(sort(ar, by=input$sort)[1:nR()], method='paracoord')
}, height=800, width=800)
## Matrix Plot ###################
output$matrixPlot <- renderPlot({
ar <- rules()
plot(sort(ar, by=input$sort)[1:nR()], method='matrix', control=list(reorder=T))
}, height=800, width=800)
## Item Frequency Plot ##########################
output$itemFreqPlot <- renderPlot({
trans <- as(dataset[,input$cols], 'transactions')
itemFrequencyPlot(trans)
}, height=800, width=800)
## Rules Data Table ##########################
output$rulesDataTable <- renderDataTable({
ar <- rules()
rulesdt <- rules2df(ar)
rulesdt
})
## Rules Printed ########################
output$rulesTable <- renderPrint({
#hack to disply results... make sure this match line above!!
#ar <- apriori(dataset[,input$cols], parameter=list(support=input$supp, confidence=input$conf, minlen=input$minL, maxlen=input$maxL))
ar <- rules()
inspect(sort(ar, by=input$sort))
})
## Download data to csv ########################
output$downloadData <- downloadHandler(
filename = 'arules_data.csv',
content = function(file) {
write.csv(rules2df(rules()), file)
}
)
}
)
}
arulesApp(studentMat)
install.packages("Rsenal")
arulesApp(studentMat)
ap <- available.packages()
"Rsenal" %in% rownames(ap)
app
ap
arulesApp(studentMat)
library('devtools')
library('shiny')
library('arules')
library('arulesViz')
source_gist(id='706a28f832a33e90283b')
arulesApp(studentMat)
install.packages("Rsenal")
library('devtools')
install_github('brooksandrew/Rsenal')
library('Rsenal')
install_github('brooksandrew/Rsenal')
library('Rsenal')
arulesApp(studentMat)
for(i in 1:ncol(studentPor)) {
if(class(dataset[,i]) %in% c('numeric', 'integer')) dataset[,i] <- Rsenal::depthbin(dataset[,i], nbins=10)
}
dataset <- for(i in 1:ncol(dataset)) {
if(class(dataset[,i]) %in% c('numeric', 'integer')) dataset[,i] <- Rsenal::depthbin(dataset[,i], nbins=10)
d+
)
datatset <- studentPor
for(i in 1:ncol(dataset)) {
if(class(dataset[,i]) %in% c('numeric', 'integer')) dataset[,i] <- Rsenal::depthbin(dataset[,i], nbins=10)
}
dataset <- studentPor
for(i in 1:ncol(dataset)) {
if(class(dataset[,i]) %in% c('numeric', 'integer')) dataset[,i] <- Rsenal::depthbin(dataset[,i], nbins=10)
}
install.packages("dummies")
library(dummies)
if(class(dataset[,i]) %in% c('numeric', 'integer')) dataset[,i] <- Rsenal::depthbin(dataset[,i], nbins=10)
str(studentMat)
dummy.data.frame(studentMat, sep = ".")
studentMat.aso <- dummy.data.frame(studentMat, sep = ".")
reglas <- apriori(studentMat.aso ,parameter = list( supp = 0.05 , conf = 0.7 , target = "rules", minlen = 2),
appearance = list(rhs = c("G3Pass=1", "G3Pass=0"), default = "lhs"))
studentMat.aso
studentMat$pass <- ifelse(studentMat$g3 > 9, 1, 0)
studentMat.aso <- dummy.data.frame(studentMat, sep = ".")
reglas <- apriori(studentMat.aso ,parameter = list( supp = 0.05 , conf = 0.7 , target = "rules", minlen = 2),
appearance = list(rhs = c("G3Pass=1", "G3Pass=0"), default = "lhs"))
reglas_redundantes <- reglas[is.redundant(x = reglas, measure = "confidence")]
summary(reglas_redundantes)
inspect(sort(reglas_redundantes, by = "support")[1:10])
plot(reglas_redundantes, method = "grouped", control = list(k = 15, col = heat.colors(12)))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(ggplot2)
library(reshape)
library(tidyr)
library(discretization)
install.packages("discretization")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(ggplot2)
library(reshape)
library(tidyr)
library(discretization)
library(arules)
library(arulesViz)
loanData = read.csv("loan.csv", sep = ";", dec = ",")
data.types = sapply(loanData, class)
table(data.types)
sapply(loanData, function(x) sum(is.na(x)))
loanData = loanData[1:700,]
loanData$educ = factor(loanData$educ, labels = c("Did not complete high school", "High school degree", "Some college", "College degree","Post-undergraduate degree"))
loanData$impago = factor(loanData$impago, labels = c("No", "Yes"))
subset.numeric.dt = function(df) {
return(df[,sapply(df, class) != "factor", drop = F])
}
subset.numeric = function(df) {
return(cbind(subset.numeric.dt(df), impago = df$impago))
}
loanData = cbind(subset(loanData, select = -impago), loanData[,"impago", drop = F])
loanDataNumeric = subset.numeric(loanData)
loanDataRmNa = loanDataNumeric[1:700,]
cutp = disc.Topdown(loanDataRmNa)$cutp
loanDataDisc = loanDataRmNa
for (i in 1:(ncol(loanDataRmNa)-1)) {
loanDataDisc[,i] = cut(loanDataRmNa[,i], cutp[[i]], include.lowest = T)
}
loanDataDisc = cbind(loanData[1:700,"educ",drop=F], loanDataDisc)
loanTrans = as(loanDataDisc, "transactions")
summary(loanTrans)
itemFrequencyPlot(loanTrans, support = 0.1, cex.names = 0.8)
iSLoan = apriori(loanTrans, parameter = list(support = 0.1, target="frequent"))
iSData = data.frame(itemset.size = as.factor(size(iSLoan)))
ggplot(iSData) + geom_bar(aes(itemset.size)) + ggtitle("Histograma de los itemsets")
iSMLoan = iSLoan[is.maximal(iSLoan)]
inspect(head(sort(iSMLoan, by = "support"), 1))
iSMData = data.frame(itemset.size = as.factor(size(iSMLoan)))
ggplot(iSMData) + geom_bar(aes(itemset.size)) + ggtitle("Histograma de los itemsets maximales")
iSCLoan = iSLoan[is.closed(iSLoan)]
inspect(head(sort(iSCLoan, by = "support"), 5))
length(iSCLoan)
iSCData = data.frame(itemset.size = as.factor(size(iSCLoan)))
ggplot(iSCData) + geom_bar(aes(itemset.size)) + ggtitle("Histograma de los itemsets cerrados")
dataFCM = data.frame(Frecuentes = length(iSLoan), Cerrados = length(iSCLoan), Maximales = length(iSMLoan))
dataFCM = melt(dataFCM)
ggplot(dataFCM) + geom_col(aes(variable, value, fill = variable)) + ggtitle("Histograma conjunto de los itemsets") + labs(x = "Itemsets", y = "Frecuencia")
aRules = apriori(loanTrans, parameter = list(support = 0.1, confidence = 0.8, minlen = 2))
cat("Reglas obtenidas: ",summary(aRules)@length)
aRulesConf = sort(aRules, by = "confidence")
head(inspect(head(aRulesConf)), n=5)
head(quality(head(aRulesConf)), n=5)
aRulesLift = sort(aRules, by = "lift")
head(inspect(head(aRulesLift)), n=5)
head(quality(head(aRulesLift)), n=5)
aRulesSelect = subset(aRules, subset = rhs %in% c("impago=Yes", "impago=No") | lift > 2)
aRulesSelect <- aRulesSelect[!is.redundant(aRulesSelect)]
subsetMatrix = is.subset(aRulesSelect, aRulesSelect)
subsetMatrix[lower.tri(subsetMatrix, diag = T)] <- FALSE
redundant = colSums(subsetMatrix, na.rm = T) >= 1
aRulesPruned = aRulesSelect[!redundant]
cat("Reglas no redundantes: ", summary(aRulesPruned)@length)
myInterestMeasures = interestMeasure(aRulesPruned, measure = c("hyperConfidence", "leverage", "phi", "gini"), transactions = loanTrans)
quality(aRulesPruned) = cbind(quality(aRulesPruned), myInterestMeasures)
head(inspect(sort(aRulesPruned, by = "gini")),n=5)
plot(aRulesPruned, method="graph", control=list(type="items"))
loanData = loanData[1:700,]
loanData$educ = factor(loanData$educ, labels = c("Did not complete high school", "High school degree", "Some college", "College degree","Post-undergraduate degree"))
loanData$impago = factor(loanData$impago, labels = c("No", "Yes"))
knitr::opts_chunk$set(echo = TRUE, warning = FALSE)
library(ggplot2)
library(reshape)
library(tidyr)
library(discretization)
library(arules)
library(arulesViz)
loanData = read.csv("loan.csv", sep = ";", dec = ",")
data.types = sapply(loanData, class)
table(data.types)
sapply(loanData, function(x) sum(is.na(x)))
loanData = loanData[1:700,]
loanData$educ = factor(loanData$educ, labels = c("Did not complete high school", "High school degree", "Some college", "College degree","Post-undergraduate degree"))
loanData$impago = factor(loanData$impago, labels = c("No", "Yes"))
subset.numeric.dt = function(df) {
return(df[,sapply(df, class) != "factor", drop = F])
}
subset.numeric = function(df) {
return(cbind(subset.numeric.dt(df), impago = df$impago))
}
loanData = cbind(subset(loanData, select = -impago), loanData[,"impago", drop = F])
loanDataNumeric = subset.numeric(loanData)
loanDataRmNa = loanDataNumeric[1:700,]
cutp = disc.Topdown(loanDataRmNa)$cutp
loanDataDisc = loanDataRmNa
for (i in 1:(ncol(loanDataRmNa)-1)) {
loanDataDisc[,i] = cut(loanDataRmNa[,i], cutp[[i]], include.lowest = T)
}
loanDataDisc = cbind(loanData[1:700,"educ",drop=F], loanDataDisc)
loanTrans = as(loanDataDisc, "transactions")
summary(loanTrans)
itemFrequencyPlot(loanTrans, support = 0.1, cex.names = 0.8)
iSLoan = apriori(loanTrans, parameter = list(support = 0.1, target="frequent"))
iSData = data.frame(itemset.size = as.factor(size(iSLoan)))
ggplot(iSData) + geom_bar(aes(itemset.size)) + ggtitle("Histograma de los itemsets")
iSMLoan = iSLoan[is.maximal(iSLoan)]
inspect(head(sort(iSMLoan, by = "support"), 1))
iSMData = data.frame(itemset.size = as.factor(size(iSMLoan)))
ggplot(iSMData) + geom_bar(aes(itemset.size)) + ggtitle("Histograma de los itemsets maximales")
iSCLoan = iSLoan[is.closed(iSLoan)]
inspect(head(sort(iSCLoan, by = "support"), 5))
length(iSCLoan)
iSCData = data.frame(itemset.size = as.factor(size(iSCLoan)))
ggplot(iSCData) + geom_bar(aes(itemset.size)) + ggtitle("Histograma de los itemsets cerrados")
dataFCM = data.frame(Frecuentes = length(iSLoan), Cerrados = length(iSCLoan), Maximales = length(iSMLoan))
dataFCM = melt(dataFCM)
ggplot(dataFCM) + geom_col(aes(variable, value, fill = variable)) + ggtitle("Histograma conjunto de los itemsets") + labs(x = "Itemsets", y = "Frecuencia")
aRules = apriori(loanTrans, parameter = list(support = 0.1, confidence = 0.8, minlen = 2))
cat("Reglas obtenidas: ",summary(aRules)@length)
aRulesConf = sort(aRules, by = "confidence")
head(inspect(head(aRulesConf)), n=5)
head(quality(head(aRulesConf)), n=5)
aRulesLift = sort(aRules, by = "lift")
head(inspect(head(aRulesLift)), n=5)
head(quality(head(aRulesLift)), n=5)
aRulesSelect = subset(aRules, subset = rhs %in% c("impago=Yes", "impago=No") | lift > 2)
aRulesSelect <- aRulesSelect[!is.redundant(aRulesSelect)]
subsetMatrix = is.subset(aRulesSelect, aRulesSelect)
subsetMatrix[lower.tri(subsetMatrix, diag = T)] <- FALSE
redundant = colSums(subsetMatrix, na.rm = T) >= 1
aRulesPruned = aRulesSelect[!redundant]
cat("Reglas no redundantes: ", summary(aRulesPruned)@length)
myInterestMeasures = interestMeasure(aRulesPruned, measure = c("hyperConfidence", "leverage", "phi", "gini"), transactions = loanTrans)
quality(aRulesPruned) = cbind(quality(aRulesPruned), myInterestMeasures)
head(inspect(sort(aRulesPruned, by = "gini")),n=5)
plot(aRulesPruned, method="graph", control=list(type="items"))
library(grid)
library(gridExtra)
library(tidyverse)
library(readxl)
library(knitr)
library(ggplot2)
library(lubridate)
library(arules)
library(arulesViz)
library(plyr)
library(corrplot)
knitr::opts_chunk$set(echo = TRUE)
studentMat <- read.table("student/student-mat.csv", row.names=NULL, sep=";", header=TRUE)
studentPor <- read.table("student/student-por.csv", row.names=NULL, sep=";", header=TRUE)
str(studentPor)
str(studentPor)
sapply(studentPor, class)
str(studentPor)
table(sapply(studentPor, class))
loanData = read.csv("loan.csv", sep = ";", dec = ",")
str(loanData)
33 - 17
library(grid)
library(gridExtra)
library(tidyverse)
library(dummies)
library(readxl)
library(knitr)
library(ggplot2)
library(lubridate)
library(arules)
library(arulesViz)
library(plyr)
library(corrplot)
knitr::opts_chunk$set(echo = TRUE)
names(studentPor) <- tolower(names(studentPor))
studentPor.dummy <- studentPordummy(studentPor)
names(studentPor) <- tolower(names(studentPor))
studentPor.dummy <- dummy(studentPor)
icorrplot <- function (dataset) {
cor.mtest <- function(mat, ...) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# matrix of the p-value of the correlation
p.mat <- cor.mtest(dataset)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
M <- cor(dataset)
cex.before <- par("cex")
par(cex = 0.7)
corrplot(M, method="color", col=col(200),
type="upper",
addCoef.col = "grey", # Add coefficient of correlation
tl.cex = 1/par("cex"),
cl.cex = 1/par("cex"),
tl.col="black",
tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat,
sig.level = 0.05,
addCoefasPercent = TRUE,
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
par(cex = cex.before)
}
names(studentPor) <- tolower(names(studentPor))
studentPor.dummy <- dummy(studentPor)
icorrplot(studentPor.dummy)
studentPor
icorrplot <- function (dataset) {
cor.mtest <- function(mat, ...) {
mat <- as.matrix(mat)
n <- ncol(mat)
p.mat<- matrix(NA, n, n)
diag(p.mat) <- 0
for (i in 1:(n - 1)) {
for (j in (i + 1):n) {
tmp <- cor.test(mat[, i], mat[, j], ...)
p.mat[i, j] <- p.mat[j, i] <- tmp$p.value
}
}
colnames(p.mat) <- rownames(p.mat) <- colnames(mat)
p.mat
}
# matrix of the p-value of the correlation
p.mat <- cor.mtest(dataset)
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA"))
M <- cor(dataset)
cex.before <- par("cex")
par(cex = 0.1)
corrplot(M, method="color", col=col(200),
type="upper",
addCoef.col = "grey", # Add coefficient of correlation
tl.cex = 1/par("cex"),
cl.cex = 1/par("cex"),
tl.col="black",
tl.srt=45, #Text label color and rotation
# Combine with significance
p.mat = p.mat,
sig.level = 0.05,
addCoefasPercent = TRUE,
# hide correlation coefficient on the principal diagonal
diag=FALSE
)
par(cex = cex.before)
}
names(studentPor) <- tolower(names(studentPor))
studentPor.dummy <- dummy(studentPor)
icorrplot(studentPor.dummy)
names(studentPor) <- tolower(names(studentPor))
studentPor.dummy <- dummy(studentPor)
cor(studentPor.dummy)
studentPor.dummyç
studentPor.dummy
cor(studentPor.dummy[,1:4])
names(studentPor) <- tolower(names(studentPor))
studentPor.dummy <- dummy(studentPor)
str(studentPor.dummy)
names(studentPor) <- tolower(names(studentPor))
studentPor.dummy <- dummy(studentPor)
names(studentPor.dummy)
studentMat <- read.table("student/student-mat.csv", row.names=NULL, sep=";", header=TRUE)
studentPor <- read.table("student/student-por.csv", row.names=NULL, sep=";", header=TRUE)
names(studentPor) <- tolower(names(studentPor))
studentPor.dummy <- dummy(studentPor)
names(studentPor.dummy)
studentPor.dummy
names(studentPor) <- tolower(names(studentPor))
dummy(studentPor)
studentMat <- read.table("student/student-mat.csv", row.names=NULL, sep=";", header=TRUE)
studentPor <- read.table("student/student-por.csv", row.names=NULL, sep=";", header=TRUE)
dummy(studentPor)
dummy_cols(studentMat)
